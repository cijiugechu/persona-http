name: CI
env:
  DEBUG: napi:*
  APP_NAME: rnet-node
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: pnpm
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: pnpm install
      - name: ESLint
        run: pnpm lint
      - name: Cargo fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build --target x86_64-apple-darwin
          - host: windows-latest
            build: pnpm build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm build --target x86_64-unknown-linux-musl -x
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: pnpm build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: pnpm build --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: pnpm build --target aarch64-unknown-linux-musl -x
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: pnpm
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') || matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        with:
          version: 0.15.1
      - name: Capture zig environment
        if: ${{ contains(matrix.settings.target, 'unknown-linux-musl') || matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        shell: bash
        run: |
          zig_bin="$(command -v zig)"
          lib_dir="$(zig env | awk -F'"' '/\.lib_dir/ { print $2 }')"
          echo "ZIG_BIN=$zig_bin" >> "$GITHUB_ENV"
          echo "ZIG_EXECUTABLE=$zig_bin" >> "$GITHUB_ENV"
          echo "ZIG_LIB_DIR=$lib_dir" >> "$GITHUB_ENV"
          echo "ZIG_LIBC_DIR=$lib_dir/libc" >> "$GITHUB_ENV"
      - name: Configure zig toolchain
        if: ${{ contains(matrix.settings.target, 'unknown-linux-musl') || matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        shell: bash
        run: |
          target="${{ matrix.settings.target }}"
          if [[ -z "${ZIG_LIBC_DIR:-}" ]]; then
            echo "ZIG_LIBC_DIR is not set" >&2
            exit 1
          fi
          if [[ -z "${ZIG_LIB_DIR:-}" ]]; then
            echo "ZIG_LIB_DIR is not set" >&2
            exit 1
          fi
          zig_target="${target/-unknown/}"
          env_suffix="${target//-/_}"
          echo "CC=$GITHUB_WORKSPACE/ci/zig-cc-wrapper.sh $zig_target" >> "$GITHUB_ENV"
          echo "CC_${env_suffix}=$GITHUB_WORKSPACE/ci/zig-cc-wrapper.sh $zig_target" >> "$GITHUB_ENV"
          echo "CXX=$GITHUB_WORKSPACE/ci/zig-cxx-wrapper.sh $zig_target" >> "$GITHUB_ENV"
          echo "CXX_${env_suffix}=$GITHUB_WORKSPACE/ci/zig-cxx-wrapper.sh $zig_target" >> "$GITHUB_ENV"
          echo "AR=zig ar" >> "$GITHUB_ENV"
          echo "AR_${env_suffix}=zig ar" >> "$GITHUB_ENV"
          echo "RANLIB=zig ranlib" >> "$GITHUB_ENV"
          echo "RANLIB_${env_suffix}=zig ranlib" >> "$GITHUB_ENV"
          arch_component="${zig_target%%-*}"
          include_flags="--sysroot ${ZIG_LIBC_DIR}"
          include_flags+=" -isystem ${ZIG_LIB_DIR}/include"
          include_flags+=" -isystem ${ZIG_LIB_DIR}/libc/include/${zig_target}"
          include_flags+=" -isystem ${ZIG_LIB_DIR}/libc/include/${arch_component}-linux-any"
          include_flags+=" -isystem ${ZIG_LIB_DIR}/libc/include/any-linux-any"
          if [[ "$zig_target" == *"linux-musl" ]]; then
            include_flags+=" -isystem ${ZIG_LIB_DIR}/libc/include/generic-musl"
            # Set CMAKE_TOOLCHAIN_FILE for musl targets to properly configure BoringSSL build
            if [[ "$target" == "x86_64-unknown-linux-musl" ]]; then
              echo "CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchains/zig-musl-x86_64.cmake" >> "$GITHUB_ENV"
              echo "CMAKE_TOOLCHAIN_FILE_${env_suffix}=$GITHUB_WORKSPACE/cmake/toolchains/zig-musl-x86_64.cmake" >> "$GITHUB_ENV"
            elif [[ "$target" == "aarch64-unknown-linux-musl" ]]; then
              echo "CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchains/zig-musl-aarch64.cmake" >> "$GITHUB_ENV"
              echo "CMAKE_TOOLCHAIN_FILE_${env_suffix}=$GITHUB_WORKSPACE/cmake/toolchains/zig-musl-aarch64.cmake" >> "$GITHUB_ENV"
            fi
          else
            include_flags+=" -isystem ${ZIG_LIB_DIR}/libc/include/generic-glibc"
            # Set CMAKE_TOOLCHAIN_FILE for aarch64-unknown-linux-gnu to properly configure BoringSSL build
            if [[ "$target" == "aarch64-unknown-linux-gnu" ]]; then
              echo "CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchains/zig-gnu-aarch64.cmake" >> "$GITHUB_ENV"
              echo "CMAKE_TOOLCHAIN_FILE_${env_suffix}=$GITHUB_WORKSPACE/cmake/toolchains/zig-gnu-aarch64.cmake" >> "$GITHUB_ENV"
            fi
          fi
          echo "BINDGEN_EXTRA_CLANG_ARGS_${env_suffix}=--target=$target $include_flags" >> "$GITHUB_ENV"
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: pnpm install
      - name: Configure armv7 toolchain
        if: matrix.settings.target == 'armv7-unknown-linux-gnueabihf'
        shell: bash
        run: |
          echo "CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchains/napi-armv7-gnueabihf.cmake" >> "$GITHUB_ENV"
          echo "CMAKE_TOOLCHAIN_FILE_armv7_unknown_linux_gnueabihf=$GITHUB_WORKSPACE/cmake/toolchains/napi-armv7-gnueabihf.cmake" >> "$GITHUB_ENV"
      - name: Setup node x86
        uses: actions/setup-node@v5
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 22
          cache: pnpm
          architecture: x86
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.settings.target != 'wasm32-wasip1-threads'
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.node'
          if-no-files-found: error
  build-freebsd:
    runs-on: ubuntu-latest
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v5
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.29.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '14.3'
          memory: 8G
          cpu_count: 3
          environment_variables: DEBUG RUSTUP_IO_THREADS
          shell: bash
          run: |
            sudo pkg install -y -f curl git cmake gmake node libnghttp2 npm llvm
            sudo npm install -g corepack
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain beta
            corepack prepare
            corepack enable
            source "$HOME/.cargo/env"
            LLVM_CONFIG=$(command -v llvm-config || command -v llvm-config19 || command -v llvm-config18 || command -v llvm-config17)
            if [ -z "$LLVM_CONFIG" ]; then
              echo "llvm-config not found after installing llvm" >&2
              exit 1
            fi
            export LIBCLANG_PATH="$($LLVM_CONFIG --libdir)"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ pnpm --version ~~~~"
            pnpm --version
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            pnpm install
            pnpm build
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: pnpm install --force
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: '-v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}'
          run: npm run test
  test-wasi:
    name: Test WASI target
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-wasm32-wasip1-threads
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test
        env:
          NAPI_RS_FORCE_WASI: 1
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - lint
      - build-freebsd
      - test-macOS-windows-binding
      - test-linux-binding
      - test-wasi
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: create npm dirs
        run: pnpm napi create-npm-dirs
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
