/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Client {
  constructor(init?: ClientInit | undefined | null)
  request(method: string, url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  get(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  post(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  put(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  patch(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  delete(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  head(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
  options(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>
}

export declare class ResponseHandle {
  get status(): number
  get ok(): boolean
  get statusText(): string
  get url(): string
  get version(): string
  /** Returns the response `Content-Length` in bytes, or `-1` when not provided by the server. */
  get contentLength(): number
  get headers(): Record<string, Array<string>>
  get localAddr(): string | null
  get remoteAddr(): string | null
  history(): Array<RedirectHistoryEntry>
  text(): Promise<string>
  json(): Promise<any>
  bytes(): Promise<Buffer>
  close(): void
}

export interface BasicAuth {
  username: string
  password?: string
}

export interface ClientInit {
  emulation?: string | EmulationOptions
  userAgent?: string
  headers?: Record<string, string | Array<string>>
  referer?: boolean
  history?: boolean
  allowRedirects?: boolean
  maxRedirects?: number
  cookieStore?: boolean
  timeout?: number
  connectTimeout?: number
  readTimeout?: number
  tcpKeepalive?: number
  tcpKeepaliveInterval?: number
  tcpKeepaliveRetries?: number
  tcpUserTimeout?: number
  tcpNodelay?: boolean
  tcpReuseAddress?: boolean
  poolIdleTimeout?: number
  poolMaxIdlePerHost?: number
  poolMaxSize?: number
  http1Only?: boolean
  http2Only?: boolean
  httpsOnly?: boolean
  minTlsVersion?: string
  maxTlsVersion?: string
  tlsInfo?: boolean
  verify?: boolean | string
  verifyHostname?: boolean
  noProxy?: boolean
  proxies?: Array<ProxyConfig>
  localAddress?: string
  interface?: string
  gzip?: boolean
  brotli?: boolean
  deflate?: boolean
  zstd?: boolean
}

/** use this instead of delete because delete is a reserved keyword in JavaScript */
export declare function delete_(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export interface EmulationOptions {
  preset?: string
  os?: string
  skipHttp2?: boolean
  skipHeaders?: boolean
}

export declare function get(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export declare function head(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export declare function options(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export declare function patch(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export declare function post(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export interface ProxyConfig {
  uri: string
  username?: string
  password?: string
}

export declare function put(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export interface RedirectHistoryEntry {
  status: number
  uri: string
  previous: string
}

export declare function request(url: string, init?: RequestInit | undefined | null): Promise<ResponseHandle>

export interface RequestInit {
  method?: string
  headers?: Record<string, string | Array<string>>
  defaultHeaders?: boolean
  cookies?: Array<string>
  emulation?: string | EmulationOptions
  allowRedirects?: boolean
  maxRedirects?: number
  gzip?: boolean
  brotli?: boolean
  deflate?: boolean
  zstd?: boolean
  auth?: string
  bearerAuth?: string
  basicAuth?: BasicAuth
  query?: Record<string, string | Array<string>>
  form?: Record<string, string | Array<string>>
  json?: any
  body?: string | Buffer
  timeout?: number
  readTimeout?: number
  version?: string
  proxy?: ProxyConfig
  localAddress?: string
  interface?: string
}

export interface WebSocketInit {
  headers?: Record<string, string | Array<string>>
  defaultHeaders?: boolean
  cookies?: Array<string>
  emulation?: string | EmulationOptions
  auth?: string
  bearerAuth?: string
  basicAuth?: BasicAuth
  query?: Record<string, string | Array<string>>
  protocols?: Array<string>
  forceHttp2?: boolean
  readBufferSize?: number
  writeBufferSize?: number
  maxWriteBufferSize?: number
  maxFrameSize?: number
  maxMessageSize?: number
  acceptUnmaskedFrames?: boolean
  proxy?: ProxyConfig
  localAddress?: string
  interface?: string
}
